version: '3.9'  # optional since Compose v1.27.0

volumes:  
  rabbitmq_data: null
  postgres_data: null
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
     type: tmpfs
     device: tmpfs
  kong_tmp_vol:
    driver_opts:
     type: tmpfs
     device: tmpfs
  konga_data: null

networks:
  gslNET:
    external: true

services:
  postgres-service:
    container_name: postgres
    build:
      context: ./env_setup/postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: gsl_db,kong_db,konga_db
      POSTGRES_HOST_AUTH_METHOD: trust
      bind-address: 0.0.0.0
      POSTGRES_ROOT_HOST: '%'
    user: postgres
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - gslNET

  kong-migrations:
    image: kong:latest
    container_name: kong-migrations
    entrypoint: sh -c "sleep 10 && kong migrations bootstrap -v"
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres-service
      KONG_PG_DATABASE: kong_db
      KONG_PG_USER: kong_db
      KONG_PG_PASSWORD: kong_db
    depends_on:
      postgres-service:
        condition: service_healthy
    networks:
      - gslNET
    restart: on-failure

  kong:
    image: kong:latest
    container_name: kong-service
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_CASSANDRA_CONTACT_POINTS: db
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong_db
      KONG_PG_HOST: postgres-service
      KONG_PG_USER: kong_db
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PG_PASSWORD: kong_db
    user: kong
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: false
    ports:
      - 8000:8000/tcp
      - 8001:8001/tcp
      - 8443:8443/tcp
      - 8444:8444/tcp
    networks:
      - gslNET
    depends_on:
      postgres-service:
        condition: service_healthy
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
      - ./config:/opt/kong
    security_opt:
      - no-new-privileges

  konga-prepare:
    image: pantsel/konga:latest
    container_name: konga-prepare
    volumes:
      - konga_data:/app/kongadata
    command: "-c prepare -a postgres -u postgresql://postgres:postgres@postgres-service:5432/konga_db"
    networks:
      - gslNET
    restart: on-failure
    depends_on:
      postgres-service:
        condition: service_healthy

  konga:
    image: pantsel/konga
    container_name: konga-service
    volumes:
      - konga_data:/app/kongadata
    environment:
      TOKEN_SECRET: ahfdjgjgf79JKLFHJKh978953kgdfjkl
      DB_ADAPTER: postgres
      DB_HOST: postgres-service
      DB_PORT: 5432
      DB_DATABASE: konga_db
      DB_USER: postgres
      DB_PASSWORD: postgres
      NODE_ENV: production
      KONGA_HOOK_TIMEOUT: 120000
    restart: on-failure
    ports:
      - 1337:1337
    depends_on:
      postgres-service:
        condition: service_healthy
    networks:
      - gslNET
  
  rabbitmq-service:
    image: rabbitmq:management
    container_name: rabbitmq
    networks:
      - gslNET
    environment:
      - RABBITMQ_DEFAULT_USER=radmin
      - RABBITMQ_DEFAULT_PASS=radmin
    volumes:
      - rabbitmq_data:/etc/rabbitmq/
      - rabbitmq_data:/var/lib/rabbitmq/
      - rabbitmq_data:/var/log/rabbitmq/
    hostname: rabbitmq
    labels:
      NAME: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:15672" ]
      interval: 30s
      timeout: 10s
      retries: 5
  
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app
    networks:
      - gslNET
    ports:
      - 80:80
      - 443:443
    environment:
      - DBHOST=postgres
      # - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      # - ASPNETCORE_URLS=https://+:443;http://+:80
      - HOSTNAMERABBIT=rabbitmq
    restart: on-failure
    depends_on:
      rabbitmq-service:
        condition: service_started
      postgres-service:
        condition: service_started
    links:
      - postgres-service
      - rabbitmq
